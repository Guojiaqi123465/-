// Generated by gencpp from file wpb_home_bringup/motorpos.msg
// DO NOT EDIT!


#ifndef WPB_HOME_BRINGUP_MESSAGE_MOTORPOS_H
#define WPB_HOME_BRINGUP_MESSAGE_MOTORPOS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace wpb_home_bringup
{
template <class ContainerAllocator>
struct motorpos_
{
  typedef motorpos_<ContainerAllocator> Type;

  motorpos_()
    : motorpos1(0)
    , motorpos2(0)
    , motorpos3(0)
    , nParseCount(0)
    , fPosDiff1(0.0)
    , fPosDiff2(0.0)
    , fPosDiff3(0.0)  {
    }
  motorpos_(const ContainerAllocator& _alloc)
    : motorpos1(0)
    , motorpos2(0)
    , motorpos3(0)
    , nParseCount(0)
    , fPosDiff1(0.0)
    , fPosDiff2(0.0)
    , fPosDiff3(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _motorpos1_type;
  _motorpos1_type motorpos1;

   typedef int64_t _motorpos2_type;
  _motorpos2_type motorpos2;

   typedef int64_t _motorpos3_type;
  _motorpos3_type motorpos3;

   typedef int64_t _nParseCount_type;
  _nParseCount_type nParseCount;

   typedef double _fPosDiff1_type;
  _fPosDiff1_type fPosDiff1;

   typedef double _fPosDiff2_type;
  _fPosDiff2_type fPosDiff2;

   typedef double _fPosDiff3_type;
  _fPosDiff3_type fPosDiff3;





  typedef boost::shared_ptr< ::wpb_home_bringup::motorpos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wpb_home_bringup::motorpos_<ContainerAllocator> const> ConstPtr;

}; // struct motorpos_

typedef ::wpb_home_bringup::motorpos_<std::allocator<void> > motorpos;

typedef boost::shared_ptr< ::wpb_home_bringup::motorpos > motorposPtr;
typedef boost::shared_ptr< ::wpb_home_bringup::motorpos const> motorposConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wpb_home_bringup::motorpos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wpb_home_bringup::motorpos_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::wpb_home_bringup::motorpos_<ContainerAllocator1> & lhs, const ::wpb_home_bringup::motorpos_<ContainerAllocator2> & rhs)
{
  return lhs.motorpos1 == rhs.motorpos1 &&
    lhs.motorpos2 == rhs.motorpos2 &&
    lhs.motorpos3 == rhs.motorpos3 &&
    lhs.nParseCount == rhs.nParseCount &&
    lhs.fPosDiff1 == rhs.fPosDiff1 &&
    lhs.fPosDiff2 == rhs.fPosDiff2 &&
    lhs.fPosDiff3 == rhs.fPosDiff3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::wpb_home_bringup::motorpos_<ContainerAllocator1> & lhs, const ::wpb_home_bringup::motorpos_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace wpb_home_bringup

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::wpb_home_bringup::motorpos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wpb_home_bringup::motorpos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wpb_home_bringup::motorpos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wpb_home_bringup::motorpos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wpb_home_bringup::motorpos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wpb_home_bringup::motorpos_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wpb_home_bringup::motorpos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c4efa34688fb890a2741cdd11f6591d7";
  }

  static const char* value(const ::wpb_home_bringup::motorpos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc4efa34688fb890aULL;
  static const uint64_t static_value2 = 0x2741cdd11f6591d7ULL;
};

template<class ContainerAllocator>
struct DataType< ::wpb_home_bringup::motorpos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wpb_home_bringup/motorpos";
  }

  static const char* value(const ::wpb_home_bringup::motorpos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wpb_home_bringup::motorpos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 motorpos1\n"
"int64 motorpos2\n"
"int64 motorpos3\n"
"int64 nParseCount\n"
"float64 fPosDiff1\n"
"float64 fPosDiff2\n"
"float64 fPosDiff3\n"
;
  }

  static const char* value(const ::wpb_home_bringup::motorpos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wpb_home_bringup::motorpos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motorpos1);
      stream.next(m.motorpos2);
      stream.next(m.motorpos3);
      stream.next(m.nParseCount);
      stream.next(m.fPosDiff1);
      stream.next(m.fPosDiff2);
      stream.next(m.fPosDiff3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motorpos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wpb_home_bringup::motorpos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wpb_home_bringup::motorpos_<ContainerAllocator>& v)
  {
    s << indent << "motorpos1: ";
    Printer<int64_t>::stream(s, indent + "  ", v.motorpos1);
    s << indent << "motorpos2: ";
    Printer<int64_t>::stream(s, indent + "  ", v.motorpos2);
    s << indent << "motorpos3: ";
    Printer<int64_t>::stream(s, indent + "  ", v.motorpos3);
    s << indent << "nParseCount: ";
    Printer<int64_t>::stream(s, indent + "  ", v.nParseCount);
    s << indent << "fPosDiff1: ";
    Printer<double>::stream(s, indent + "  ", v.fPosDiff1);
    s << indent << "fPosDiff2: ";
    Printer<double>::stream(s, indent + "  ", v.fPosDiff2);
    s << indent << "fPosDiff3: ";
    Printer<double>::stream(s, indent + "  ", v.fPosDiff3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WPB_HOME_BRINGUP_MESSAGE_MOTORPOS_H
