// Generated by gencpp from file LabExplainedRobot_package/face_detect.msg
// DO NOT EDIT!


#ifndef LABEXPLAINEDROBOT_PACKAGE_MESSAGE_FACE_DETECT_H
#define LABEXPLAINEDROBOT_PACKAGE_MESSAGE_FACE_DETECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace LabExplainedRobot_package
{
template <class ContainerAllocator>
struct face_detect_
{
  typedef face_detect_<ContainerAllocator> Type;

  face_detect_()
    : face_num(0)  {
    }
  face_detect_(const ContainerAllocator& _alloc)
    : face_num(0)  {
  (void)_alloc;
    }



   typedef int64_t _face_num_type;
  _face_num_type face_num;





  typedef boost::shared_ptr< ::LabExplainedRobot_package::face_detect_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::LabExplainedRobot_package::face_detect_<ContainerAllocator> const> ConstPtr;

}; // struct face_detect_

typedef ::LabExplainedRobot_package::face_detect_<std::allocator<void> > face_detect;

typedef boost::shared_ptr< ::LabExplainedRobot_package::face_detect > face_detectPtr;
typedef boost::shared_ptr< ::LabExplainedRobot_package::face_detect const> face_detectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::LabExplainedRobot_package::face_detect_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::LabExplainedRobot_package::face_detect_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::LabExplainedRobot_package::face_detect_<ContainerAllocator1> & lhs, const ::LabExplainedRobot_package::face_detect_<ContainerAllocator2> & rhs)
{
  return lhs.face_num == rhs.face_num;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::LabExplainedRobot_package::face_detect_<ContainerAllocator1> & lhs, const ::LabExplainedRobot_package::face_detect_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace LabExplainedRobot_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::LabExplainedRobot_package::face_detect_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::LabExplainedRobot_package::face_detect_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::LabExplainedRobot_package::face_detect_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::LabExplainedRobot_package::face_detect_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::LabExplainedRobot_package::face_detect_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::LabExplainedRobot_package::face_detect_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::LabExplainedRobot_package::face_detect_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9e0e4a51140140eb557dc5a65700eebd";
  }

  static const char* value(const ::LabExplainedRobot_package::face_detect_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9e0e4a51140140ebULL;
  static const uint64_t static_value2 = 0x557dc5a65700eebdULL;
};

template<class ContainerAllocator>
struct DataType< ::LabExplainedRobot_package::face_detect_<ContainerAllocator> >
{
  static const char* value()
  {
    return "LabExplainedRobot_package/face_detect";
  }

  static const char* value(const ::LabExplainedRobot_package::face_detect_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::LabExplainedRobot_package::face_detect_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 face_num\n"
;
  }

  static const char* value(const ::LabExplainedRobot_package::face_detect_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::LabExplainedRobot_package::face_detect_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.face_num);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct face_detect_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::LabExplainedRobot_package::face_detect_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::LabExplainedRobot_package::face_detect_<ContainerAllocator>& v)
  {
    s << indent << "face_num: ";
    Printer<int64_t>::stream(s, indent + "  ", v.face_num);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LABEXPLAINEDROBOT_PACKAGE_MESSAGE_FACE_DETECT_H
